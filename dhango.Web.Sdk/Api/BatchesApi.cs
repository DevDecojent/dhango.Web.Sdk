/* 
 * Demo Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using dhango.Web.Sdk.Client;
using dhango.Web.Sdk.Model;
using RestSharp;
using System.Collections.ObjectModel;

namespace dhango.Web.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a list of batches.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>GetBatchResponseSearchResults</returns>
        GetBatchResponseSearchResults BatchesGet (string accountKey = null, string culture = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Returns a list of batches.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>ApiResponse of GetBatchResponseSearchResults</returns>
        ApiResponse<GetBatchResponseSearchResults> BatchesGetWithHttpInfo (string accountKey = null, string culture = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Gets the summary details of a single batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the batch.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>GetBatchResponse</returns>
        GetBatchResponse BatchesIdGet (long? id, string accountKey = null, string culture = null);

        /// <summary>
        /// Gets the summary details of a single batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the batch.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of GetBatchResponse</returns>
        ApiResponse<GetBatchResponse> BatchesIdGetWithHttpInfo (long? id, string accountKey = null, string culture = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns a list of batches.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>Task of GetBatchResponseSearchResults</returns>
        System.Threading.Tasks.Task<GetBatchResponseSearchResults> BatchesGetAsync (string accountKey = null, string culture = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Returns a list of batches.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (GetBatchResponseSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBatchResponseSearchResults>> BatchesGetAsyncWithHttpInfo (string accountKey = null, string culture = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Gets the summary details of a single batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the batch.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of GetBatchResponse</returns>
        System.Threading.Tasks.Task<GetBatchResponse> BatchesIdGetAsync (long? id, string accountKey = null, string culture = null);

        /// <summary>
        /// Gets the summary details of a single batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the batch.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (GetBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBatchResponse>> BatchesIdGetAsyncWithHttpInfo (long? id, string accountKey = null, string culture = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BatchesApi : ClientApi, IBatchesApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchesApi(String basePath, string key, string secret)
            : base(basePath, key, secret)
        {

        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns a list of batches. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>GetBatchResponseSearchResults</returns>
        public GetBatchResponseSearchResults BatchesGet (string accountKey = null, string culture = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<GetBatchResponseSearchResults> localVarResponse = BatchesGetWithHttpInfo(accountKey, culture, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of batches. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>ApiResponse of GetBatchResponseSearchResults</returns>
        public ApiResponse< GetBatchResponseSearchResults > BatchesGetWithHttpInfo (string accountKey = null, string culture = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBatchResponseSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetBatchResponseSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBatchResponseSearchResults)));
        }

        /// <summary>
        /// Returns a list of batches. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>Task of GetBatchResponseSearchResults</returns>
        public async System.Threading.Tasks.Task<GetBatchResponseSearchResults> BatchesGetAsync (string accountKey = null, string culture = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<GetBatchResponseSearchResults> localVarResponse = await BatchesGetAsyncWithHttpInfo(accountKey, culture, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of batches. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (GetBatchResponseSearchResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBatchResponseSearchResults>> BatchesGetAsyncWithHttpInfo (string accountKey = null, string culture = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBatchResponseSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetBatchResponseSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBatchResponseSearchResults)));
        }

        /// <summary>
        /// Gets the summary details of a single batch. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the batch.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>GetBatchResponse</returns>
        public GetBatchResponse BatchesIdGet (long? id, string accountKey = null, string culture = null)
        {
             ApiResponse<GetBatchResponse> localVarResponse = BatchesIdGetWithHttpInfo(id, accountKey, culture);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the summary details of a single batch. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the batch.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of GetBatchResponse</returns>
        public ApiResponse< GetBatchResponse > BatchesIdGetWithHttpInfo (long? id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BatchesApi->BatchesIdGet");

            var localVarPath = "/batches/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBatchResponse)));
        }

        /// <summary>
        /// Gets the summary details of a single batch. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the batch.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of GetBatchResponse</returns>
        public async System.Threading.Tasks.Task<GetBatchResponse> BatchesIdGetAsync (long? id, string accountKey = null, string culture = null)
        {
             ApiResponse<GetBatchResponse> localVarResponse = await BatchesIdGetAsyncWithHttpInfo(id, accountKey, culture);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the summary details of a single batch. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the batch.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (GetBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBatchResponse>> BatchesIdGetAsyncWithHttpInfo (long? id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BatchesApi->BatchesIdGet");

            var localVarPath = "/batches/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBatchResponse)));
        }

    }
}
