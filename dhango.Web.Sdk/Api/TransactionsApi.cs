/* 
 * Demo Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using dhango.Web.Sdk.Client;
using dhango.Web.Sdk.Model;
using RestSharp;
using System.Collections.ObjectModel;

namespace dhango.Web.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Attempts to authorize a payment using on a card.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to authorize the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostAuthorizeResponse</returns>
        PostAuthorizeResponse TransactionsAuthorizePost(PostAuthorizeRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to authorize a payment using on a card.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to authorize the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostAuthorizeResponse</returns>
        ApiResponse<PostAuthorizeResponse> TransactionsAuthorizePostWithHttpInfo(PostAuthorizeRequest body = null, string accountKey = null, string culture = null);
        /// <summary>
        /// Returns a list of transactions that match the search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="batchId">Filter for transactions in a given batch. (optional)</param>
        /// <param name="transactionEventType">Filter by the type of event that initiated the transaction. If used in               conjunction with the begin date and/or end date, this will filter by the date associated with that event. For example,              specifying an event type of Refund as well as dates would filter for transactions that were refunded in that date range. (optional)</param>
        /// <param name="beginDate">The first date by which to filter. (optional)</param>
        /// <param name="endDate">The last date by which to filter. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>GetTransactionResponseSearchResults</returns>
        GetTransactionResponseSearchResults TransactionsGet(string accountKey = null, string culture = null, long? batchId = null, TransactionEventType? transactionEventType = null, DateTime? beginDate = null, DateTime? endDate = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Returns a list of transactions that match the search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="batchId">Filter for transactions in a given batch. (optional)</param>
        /// <param name="transactionEventType">Filter by the type of event that initiated the transaction. If used in               conjunction with the begin date and/or end date, this will filter by the date associated with that event. For example,              specifying an event type of Refund as well as dates would filter for transactions that were refunded in that date range. (optional)</param>
        /// <param name="beginDate">The first date by which to filter. (optional)</param>
        /// <param name="endDate">The last date by which to filter. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>ApiResponse of GetTransactionResponseSearchResults</returns>
        ApiResponse<GetTransactionResponseSearchResults> TransactionsGetWithHttpInfo(string accountKey = null, string culture = null, long? batchId = null, TransactionEventType? transactionEventType = null, DateTime? beginDate = null, DateTime? endDate = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Attempts to capture a payment from a previously authorized transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the previously authorized transaction.</param>
        /// <param name="body">The details of the amount to be captured. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostCaptureResponse</returns>
        PostCaptureResponse TransactionsIdCapturePost(long? id, PostCaptureRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to capture a payment from a previously authorized transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the previously authorized transaction.</param>
        /// <param name="body">The details of the amount to be captured. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostCaptureResponse</returns>
        ApiResponse<PostCaptureResponse> TransactionsIdCapturePostWithHttpInfo(long? id, PostCaptureRequest body = null, string accountKey = null, string culture = null);
        /// <summary>
        /// Gets detailed information on a single transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>GetTransactionResponse</returns>
        GetTransactionResponse TransactionsIdGet(long? id, string accountKey = null, string culture = null);

        /// <summary>
        /// Gets detailed information on a single transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of GetTransactionResponse</returns>
        ApiResponse<GetTransactionResponse> TransactionsIdGetWithHttpInfo(long? id, string accountKey = null, string culture = null);
        /// <summary>
        /// Attempts to refund a successful payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction to be refunded.</param>
        /// <param name="body">The details of the amount to be refunded. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostRefundResponse</returns>
        PostRefundResponse TransactionsIdRefundPost(long? id, PostRefundRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to refund a successful payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction to be refunded.</param>
        /// <param name="body">The details of the amount to be refunded. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostRefundResponse</returns>
        ApiResponse<PostRefundResponse> TransactionsIdRefundPostWithHttpInfo(long? id, PostRefundRequest body = null, string accountKey = null, string culture = null);
        /// <summary>
        /// Attempts to void a payment. Note that voiding is only allowed on new transactions where the movement of   funds has not yet occurred.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostVoidResponse</returns>
        PostVoidResponse TransactionsIdVoidPost(long? id, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to void a payment. Note that voiding is only allowed on new transactions where the movement of   funds has not yet occurred.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostVoidResponse</returns>
        ApiResponse<PostVoidResponse> TransactionsIdVoidPostWithHttpInfo(long? id, string accountKey = null, string culture = null);
        /// <summary>
        /// Attempts to initiate a payment using a specified payment method. This operation runs an authorization and capture on card transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to initiate the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostPayResponse</returns>
        PostPayResponse TransactionsPayPost(PostPayRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to initiate a payment using a specified payment method. This operation runs an authorization and capture on card transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to initiate the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostPayResponse</returns>
        ApiResponse<PostPayResponse> TransactionsPayPostWithHttpInfo(PostPayRequest body = null, string accountKey = null, string culture = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Attempts to authorize a payment using on a card.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to authorize the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostAuthorizeResponse</returns>
        System.Threading.Tasks.Task<PostAuthorizeResponse> TransactionsAuthorizePostAsync(PostAuthorizeRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to authorize a payment using on a card.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to authorize the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostAuthorizeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostAuthorizeResponse>> TransactionsAuthorizePostAsyncWithHttpInfo(PostAuthorizeRequest body = null, string accountKey = null, string culture = null);
        /// <summary>
        /// Returns a list of transactions that match the search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="batchId">Filter for transactions in a given batch. (optional)</param>
        /// <param name="transactionEventType">Filter by the type of event that initiated the transaction. If used in               conjunction with the begin date and/or end date, this will filter by the date associated with that event. For example,              specifying an event type of Refund as well as dates would filter for transactions that were refunded in that date range. (optional)</param>
        /// <param name="beginDate">The first date by which to filter. (optional)</param>
        /// <param name="endDate">The last date by which to filter. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>Task of GetTransactionResponseSearchResults</returns>
        System.Threading.Tasks.Task<GetTransactionResponseSearchResults> TransactionsGetAsync(string accountKey = null, string culture = null, long? batchId = null, TransactionEventType? transactionEventType = null, DateTime? beginDate = null, DateTime? endDate = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Returns a list of transactions that match the search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="batchId">Filter for transactions in a given batch. (optional)</param>
        /// <param name="transactionEventType">Filter by the type of event that initiated the transaction. If used in               conjunction with the begin date and/or end date, this will filter by the date associated with that event. For example,              specifying an event type of Refund as well as dates would filter for transactions that were refunded in that date range. (optional)</param>
        /// <param name="beginDate">The first date by which to filter. (optional)</param>
        /// <param name="endDate">The last date by which to filter. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (GetTransactionResponseSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransactionResponseSearchResults>> TransactionsGetAsyncWithHttpInfo(string accountKey = null, string culture = null, long? batchId = null, TransactionEventType? transactionEventType = null, DateTime? beginDate = null, DateTime? endDate = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Attempts to capture a payment from a previously authorized transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the previously authorized transaction.</param>
        /// <param name="body">The details of the amount to be captured. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostCaptureResponse</returns>
        System.Threading.Tasks.Task<PostCaptureResponse> TransactionsIdCapturePostAsync(long? id, PostCaptureRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to capture a payment from a previously authorized transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the previously authorized transaction.</param>
        /// <param name="body">The details of the amount to be captured. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostCaptureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostCaptureResponse>> TransactionsIdCapturePostAsyncWithHttpInfo(long? id, PostCaptureRequest body = null, string accountKey = null, string culture = null);
        /// <summary>
        /// Gets detailed information on a single transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of GetTransactionResponse</returns>
        System.Threading.Tasks.Task<GetTransactionResponse> TransactionsIdGetAsync(long? id, string accountKey = null, string culture = null);

        /// <summary>
        /// Gets detailed information on a single transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (GetTransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransactionResponse>> TransactionsIdGetAsyncWithHttpInfo(long? id, string accountKey = null, string culture = null);
        /// <summary>
        /// Attempts to refund a successful payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction to be refunded.</param>
        /// <param name="body">The details of the amount to be refunded. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostRefundResponse</returns>
        System.Threading.Tasks.Task<PostRefundResponse> TransactionsIdRefundPostAsync(long? id, PostRefundRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to refund a successful payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction to be refunded.</param>
        /// <param name="body">The details of the amount to be refunded. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostRefundResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostRefundResponse>> TransactionsIdRefundPostAsyncWithHttpInfo(long? id, PostRefundRequest body = null, string accountKey = null, string culture = null);
        /// <summary>
        /// Attempts to void a payment. Note that voiding is only allowed on new transactions where the movement of   funds has not yet occurred.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostVoidResponse</returns>
        System.Threading.Tasks.Task<PostVoidResponse> TransactionsIdVoidPostAsync(long? id, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to void a payment. Note that voiding is only allowed on new transactions where the movement of   funds has not yet occurred.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostVoidResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostVoidResponse>> TransactionsIdVoidPostAsyncWithHttpInfo(long? id, string accountKey = null, string culture = null);
        /// <summary>
        /// Attempts to initiate a payment using a specified payment method. This operation runs an authorization and capture on card transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to initiate the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostPayResponse</returns>
        System.Threading.Tasks.Task<PostPayResponse> TransactionsPayPostAsync(PostPayRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Attempts to initiate a payment using a specified payment method. This operation runs an authorization and capture on card transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to initiate the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostPayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostPayResponse>> TransactionsPayPostAsyncWithHttpInfo(PostPayRequest body = null, string accountKey = null, string culture = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionsApi : ClientApi, ITransactionsApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(String basePath, string key, string secret)
            : base(basePath, key, secret)
        {

        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Attempts to authorize a payment using on a card. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to authorize the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostAuthorizeResponse</returns>
        public PostAuthorizeResponse TransactionsAuthorizePost(PostAuthorizeRequest body = null, string accountKey = null, string culture = null)
        {
            ApiResponse<PostAuthorizeResponse> localVarResponse = TransactionsAuthorizePostWithHttpInfo(body, accountKey, culture);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attempts to authorize a payment using on a card. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to authorize the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostAuthorizeResponse</returns>
        public ApiResponse<PostAuthorizeResponse> TransactionsAuthorizePostWithHttpInfo(PostAuthorizeRequest body = null, string accountKey = null, string culture = null)
        {

            var localVarPath = "/transactions/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsAuthorizePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostAuthorizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostAuthorizeResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostAuthorizeResponse)));
        }

        /// <summary>
        /// Attempts to authorize a payment using on a card. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to authorize the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostAuthorizeResponse</returns>
        public async System.Threading.Tasks.Task<PostAuthorizeResponse> TransactionsAuthorizePostAsync(PostAuthorizeRequest body = null, string accountKey = null, string culture = null)
        {
            ApiResponse<PostAuthorizeResponse> localVarResponse = await TransactionsAuthorizePostAsyncWithHttpInfo(body, accountKey, culture);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Attempts to authorize a payment using on a card. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to authorize the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostAuthorizeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostAuthorizeResponse>> TransactionsAuthorizePostAsyncWithHttpInfo(PostAuthorizeRequest body = null, string accountKey = null, string culture = null)
        {

            var localVarPath = "/transactions/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsAuthorizePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostAuthorizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostAuthorizeResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostAuthorizeResponse)));
        }

        /// <summary>
        /// Returns a list of transactions that match the search criteria. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="batchId">Filter for transactions in a given batch. (optional)</param>
        /// <param name="transactionEventType">Filter by the type of event that initiated the transaction. If used in               conjunction with the begin date and/or end date, this will filter by the date associated with that event. For example,              specifying an event type of Refund as well as dates would filter for transactions that were refunded in that date range. (optional)</param>
        /// <param name="beginDate">The first date by which to filter. (optional)</param>
        /// <param name="endDate">The last date by which to filter. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>GetTransactionResponseSearchResults</returns>
        public GetTransactionResponseSearchResults TransactionsGet(string accountKey = null, string culture = null, long? batchId = null, TransactionEventType? transactionEventType = null, DateTime? beginDate = null, DateTime? endDate = null, int? page = null, int? pageSize = null)
        {
            ApiResponse<GetTransactionResponseSearchResults> localVarResponse = TransactionsGetWithHttpInfo(accountKey, culture, batchId, transactionEventType, beginDate, endDate, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of transactions that match the search criteria. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="batchId">Filter for transactions in a given batch. (optional)</param>
        /// <param name="transactionEventType">Filter by the type of event that initiated the transaction. If used in               conjunction with the begin date and/or end date, this will filter by the date associated with that event. For example,              specifying an event type of Refund as well as dates would filter for transactions that were refunded in that date range. (optional)</param>
        /// <param name="beginDate">The first date by which to filter. (optional)</param>
        /// <param name="endDate">The last date by which to filter. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>ApiResponse of GetTransactionResponseSearchResults</returns>
        public ApiResponse<GetTransactionResponseSearchResults> TransactionsGetWithHttpInfo(string accountKey = null, string culture = null, long? batchId = null, TransactionEventType? transactionEventType = null, DateTime? beginDate = null, DateTime? endDate = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (transactionEventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionEventType", transactionEventType)); // query parameter
            if (beginDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beginDate", beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransactionResponseSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTransactionResponseSearchResults)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransactionResponseSearchResults)));
        }

        /// <summary>
        /// Returns a list of transactions that match the search criteria. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="batchId">Filter for transactions in a given batch. (optional)</param>
        /// <param name="transactionEventType">Filter by the type of event that initiated the transaction. If used in               conjunction with the begin date and/or end date, this will filter by the date associated with that event. For example,              specifying an event type of Refund as well as dates would filter for transactions that were refunded in that date range. (optional)</param>
        /// <param name="beginDate">The first date by which to filter. (optional)</param>
        /// <param name="endDate">The last date by which to filter. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>Task of GetTransactionResponseSearchResults</returns>
        public async System.Threading.Tasks.Task<GetTransactionResponseSearchResults> TransactionsGetAsync(string accountKey = null, string culture = null, long? batchId = null, TransactionEventType? transactionEventType = null, DateTime? beginDate = null, DateTime? endDate = null, int? page = null, int? pageSize = null)
        {
            ApiResponse<GetTransactionResponseSearchResults> localVarResponse = await TransactionsGetAsyncWithHttpInfo(accountKey, culture, batchId, transactionEventType, beginDate, endDate, page, pageSize);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of transactions that match the search criteria. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <param name="batchId">Filter for transactions in a given batch. (optional)</param>
        /// <param name="transactionEventType">Filter by the type of event that initiated the transaction. If used in               conjunction with the begin date and/or end date, this will filter by the date associated with that event. For example,              specifying an event type of Refund as well as dates would filter for transactions that were refunded in that date range. (optional)</param>
        /// <param name="beginDate">The first date by which to filter. (optional)</param>
        /// <param name="endDate">The last date by which to filter. (optional)</param>
        /// <param name="page">The current page of the search results starting at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The number of records per page. The default is 25 and the maximum is 50. (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (GetTransactionResponseSearchResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTransactionResponseSearchResults>> TransactionsGetAsyncWithHttpInfo(string accountKey = null, string culture = null, long? batchId = null, TransactionEventType? transactionEventType = null, DateTime? beginDate = null, DateTime? endDate = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (transactionEventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionEventType", transactionEventType)); // query parameter
            if (beginDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beginDate", beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransactionResponseSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTransactionResponseSearchResults)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransactionResponseSearchResults)));
        }

        /// <summary>
        /// Attempts to capture a payment from a previously authorized transaction. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the previously authorized transaction.</param>
        /// <param name="body">The details of the amount to be captured. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostCaptureResponse</returns>
        public PostCaptureResponse TransactionsIdCapturePost(long? id, PostCaptureRequest body = null, string accountKey = null, string culture = null)
        {
            ApiResponse<PostCaptureResponse> localVarResponse = TransactionsIdCapturePostWithHttpInfo(id, body, accountKey, culture);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attempts to capture a payment from a previously authorized transaction. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the previously authorized transaction.</param>
        /// <param name="body">The details of the amount to be captured. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostCaptureResponse</returns>
        public ApiResponse<PostCaptureResponse> TransactionsIdCapturePostWithHttpInfo(long? id, PostCaptureRequest body = null, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransactionsApi->TransactionsIdCapturePost");

            var localVarPath = "/transactions/{id}/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsIdCapturePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostCaptureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostCaptureResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCaptureResponse)));
        }

        /// <summary>
        /// Attempts to capture a payment from a previously authorized transaction. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the previously authorized transaction.</param>
        /// <param name="body">The details of the amount to be captured. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostCaptureResponse</returns>
        public async System.Threading.Tasks.Task<PostCaptureResponse> TransactionsIdCapturePostAsync(long? id, PostCaptureRequest body = null, string accountKey = null, string culture = null)
        {
            ApiResponse<PostCaptureResponse> localVarResponse = await TransactionsIdCapturePostAsyncWithHttpInfo(id, body, accountKey, culture);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Attempts to capture a payment from a previously authorized transaction. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the previously authorized transaction.</param>
        /// <param name="body">The details of the amount to be captured. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostCaptureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostCaptureResponse>> TransactionsIdCapturePostAsyncWithHttpInfo(long? id, PostCaptureRequest body = null, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransactionsApi->TransactionsIdCapturePost");

            var localVarPath = "/transactions/{id}/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsIdCapturePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostCaptureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostCaptureResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCaptureResponse)));
        }

        /// <summary>
        /// Gets detailed information on a single transaction. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>GetTransactionResponse</returns>
        public GetTransactionResponse TransactionsIdGet(long? id, string accountKey = null, string culture = null)
        {
            ApiResponse<GetTransactionResponse> localVarResponse = TransactionsIdGetWithHttpInfo(id, accountKey, culture);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets detailed information on a single transaction. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of GetTransactionResponse</returns>
        public ApiResponse<GetTransactionResponse> TransactionsIdGetWithHttpInfo(long? id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransactionsApi->TransactionsIdGet");

            var localVarPath = "/transactions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTransactionResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransactionResponse)));
        }

        /// <summary>
        /// Gets detailed information on a single transaction. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of GetTransactionResponse</returns>
        public async System.Threading.Tasks.Task<GetTransactionResponse> TransactionsIdGetAsync(long? id, string accountKey = null, string culture = null)
        {
            ApiResponse<GetTransactionResponse> localVarResponse = await TransactionsIdGetAsyncWithHttpInfo(id, accountKey, culture);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets detailed information on a single transaction. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (GetTransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTransactionResponse>> TransactionsIdGetAsyncWithHttpInfo(long? id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransactionsApi->TransactionsIdGet");

            var localVarPath = "/transactions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTransactionResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransactionResponse)));
        }

        /// <summary>
        /// Attempts to refund a successful payment. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction to be refunded.</param>
        /// <param name="body">The details of the amount to be refunded. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostRefundResponse</returns>
        public PostRefundResponse TransactionsIdRefundPost(long? id, PostRefundRequest body = null, string accountKey = null, string culture = null)
        {
            ApiResponse<PostRefundResponse> localVarResponse = TransactionsIdRefundPostWithHttpInfo(id, body, accountKey, culture);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attempts to refund a successful payment. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction to be refunded.</param>
        /// <param name="body">The details of the amount to be refunded. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostRefundResponse</returns>
        public ApiResponse<PostRefundResponse> TransactionsIdRefundPostWithHttpInfo(long? id, PostRefundRequest body = null, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransactionsApi->TransactionsIdRefundPost");

            var localVarPath = "/transactions/{id}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsIdRefundPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostRefundResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostRefundResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostRefundResponse)));
        }

        /// <summary>
        /// Attempts to refund a successful payment. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction to be refunded.</param>
        /// <param name="body">The details of the amount to be refunded. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostRefundResponse</returns>
        public async System.Threading.Tasks.Task<PostRefundResponse> TransactionsIdRefundPostAsync(long? id, PostRefundRequest body = null, string accountKey = null, string culture = null)
        {
            ApiResponse<PostRefundResponse> localVarResponse = await TransactionsIdRefundPostAsyncWithHttpInfo(id, body, accountKey, culture);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Attempts to refund a successful payment. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction to be refunded.</param>
        /// <param name="body">The details of the amount to be refunded. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostRefundResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostRefundResponse>> TransactionsIdRefundPostAsyncWithHttpInfo(long? id, PostRefundRequest body = null, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransactionsApi->TransactionsIdRefundPost");

            var localVarPath = "/transactions/{id}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsIdRefundPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostRefundResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostRefundResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostRefundResponse)));
        }

        /// <summary>
        /// Attempts to void a payment. Note that voiding is only allowed on new transactions where the movement of   funds has not yet occurred. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostVoidResponse</returns>
        public PostVoidResponse TransactionsIdVoidPost(long? id, string accountKey = null, string culture = null)
        {
            ApiResponse<PostVoidResponse> localVarResponse = TransactionsIdVoidPostWithHttpInfo(id, accountKey, culture);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attempts to void a payment. Note that voiding is only allowed on new transactions where the movement of   funds has not yet occurred. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostVoidResponse</returns>
        public ApiResponse<PostVoidResponse> TransactionsIdVoidPostWithHttpInfo(long? id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransactionsApi->TransactionsIdVoidPost");

            var localVarPath = "/transactions/{id}/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsIdVoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostVoidResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostVoidResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostVoidResponse)));
        }

        /// <summary>
        /// Attempts to void a payment. Note that voiding is only allowed on new transactions where the movement of   funds has not yet occurred. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostVoidResponse</returns>
        public async System.Threading.Tasks.Task<PostVoidResponse> TransactionsIdVoidPostAsync(long? id, string accountKey = null, string culture = null)
        {
            ApiResponse<PostVoidResponse> localVarResponse = await TransactionsIdVoidPostAsyncWithHttpInfo(id, accountKey, culture);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Attempts to void a payment. Note that voiding is only allowed on new transactions where the movement of   funds has not yet occurred. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the transaction.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostVoidResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostVoidResponse>> TransactionsIdVoidPostAsyncWithHttpInfo(long? id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransactionsApi->TransactionsIdVoidPost");

            var localVarPath = "/transactions/{id}/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsIdVoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostVoidResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostVoidResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostVoidResponse)));
        }

        /// <summary>
        /// Attempts to initiate a payment using a specified payment method. This operation runs an authorization and capture on card transactions. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to initiate the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>PostPayResponse</returns>
        public PostPayResponse TransactionsPayPost(PostPayRequest body = null, string accountKey = null, string culture = null)
        {
            ApiResponse<PostPayResponse> localVarResponse = TransactionsPayPostWithHttpInfo(body, accountKey, culture);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attempts to initiate a payment using a specified payment method. This operation runs an authorization and capture on card transactions. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to initiate the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of PostPayResponse</returns>
        public ApiResponse<PostPayResponse> TransactionsPayPostWithHttpInfo(PostPayRequest body = null, string accountKey = null, string culture = null)
        {

            var localVarPath = "/transactions/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsPayPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostPayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostPayResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostPayResponse)));
        }

        /// <summary>
        /// Attempts to initiate a payment using a specified payment method. This operation runs an authorization and capture on card transactions. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to initiate the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of PostPayResponse</returns>
        public async System.Threading.Tasks.Task<PostPayResponse> TransactionsPayPostAsync(PostPayRequest body = null, string accountKey = null, string culture = null)
        {
            ApiResponse<PostPayResponse> localVarResponse = await TransactionsPayPostAsyncWithHttpInfo(body, accountKey, culture);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Attempts to initiate a payment using a specified payment method. This operation runs an authorization and capture on card transactions. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment details required to initiate the transaction. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (PostPayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostPayResponse>> TransactionsPayPostAsyncWithHttpInfo(PostPayRequest body = null, string accountKey = null, string culture = null)
        {

            var localVarPath = "/transactions/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsPayPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostPayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostPayResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostPayResponse)));
        }

    }
}
